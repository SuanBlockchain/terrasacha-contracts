"""Initial database schema

Revision ID: 2f4e22895181
Revises:
Create Date: 2025-10-14 23:49:01.169746

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel

from alembic import op


# revision identifiers, used by Alembic.
revision: str = "2f4e22895181"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contracts",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("network", sa.Enum("TESTNET", "MAINNET", name="networktype"), nullable=False),
        sa.Column(
            "contract_type", sa.Enum("MINTING_POLICY", "SPENDING_VALIDATOR", name="contracttype"), nullable=False
        ),
        sa.Column("storage_type", sa.Enum("LOCAL", "REFERENCE_SCRIPT", name="contractstoragetype"), nullable=False),
        sa.Column("policy_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("testnet_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("mainnet_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cbor_hex", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reference_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reference_output_index", sa.Integer(), nullable=True),
        sa.Column("reference_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("compilation_timestamp", sa.DateTime(), nullable=True),
        sa.Column("compilation_utxo_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("compilation_utxo_index", sa.Integer(), nullable=True),
        sa.Column("extra_data", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_contracts_name"), "contracts", ["name"], unique=False)
    op.create_index(op.f("ix_contracts_policy_id"), "contracts", ["policy_id"], unique=True)
    op.create_table(
        "wallets",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("network", sa.Enum("TESTNET", "MAINNET", name="networktype"), nullable=False),
        sa.Column("mnemonic_encrypted", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("enterprise_address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("staking_address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("payment_key_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column("extra_data", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_wallets_enterprise_address"), "wallets", ["enterprise_address"], unique=False)
    op.create_index(op.f("ix_wallets_name"), "wallets", ["name"], unique=True)
    op.create_index(op.f("ix_wallets_staking_address"), "wallets", ["staking_address"], unique=False)
    op.create_table(
        "protocols",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contract_id", sa.Integer(), nullable=False),
        sa.Column("wallet_id", sa.Integer(), nullable=False),
        sa.Column("protocol_nft_policy_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("protocol_nft_token_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_nft_token_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_admins", sa.JSON(), nullable=True),
        sa.Column("protocol_fee", sa.Integer(), nullable=False),
        sa.Column("oracle_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("projects", sa.JSON(), nullable=True),
        sa.Column("current_utxo_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("current_utxo_index", sa.Integer(), nullable=True),
        sa.Column("balance_lovelace", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["contract_id"], ["contracts.id"]),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_protocols_current_utxo_tx_id"), "protocols", ["current_utxo_tx_id"], unique=False)
    op.create_index(op.f("ix_protocols_protocol_nft_policy_id"), "protocols", ["protocol_nft_policy_id"], unique=False)
    op.create_table(
        "transactions",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("wallet_id", sa.Integer(), nullable=True),
        sa.Column("contract_id", sa.Integer(), nullable=True),
        sa.Column("tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tx_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "status", sa.Enum("PENDING", "SUBMITTED", "CONFIRMED", "FAILED", name="transactionstatus"), nullable=False
        ),
        sa.Column("operation", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("fee_lovelace", sa.Integer(), nullable=True),
        sa.Column("total_output_lovelace", sa.Integer(), nullable=True),
        sa.Column("inputs", sa.JSON(), nullable=True),
        sa.Column("outputs", sa.JSON(), nullable=True),
        sa.Column("tx_metadata", sa.JSON(), nullable=True),
        sa.Column("submitted_at", sa.DateTime(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("block_height", sa.Integer(), nullable=True),
        sa.Column("error_message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(["contract_id"], ["contracts.id"]),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_transactions_status"), "transactions", ["status"], unique=False)
    op.create_index(op.f("ix_transactions_tx_hash"), "transactions", ["tx_hash"], unique=False)
    op.create_index(op.f("ix_transactions_tx_id"), "transactions", ["tx_id"], unique=True)
    op.create_table(
        "projects",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contract_id", sa.Integer(), nullable=False),
        sa.Column("protocol_id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_metadata", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_nft_policy_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_nft_token_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("grey_token_policy_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("grey_token_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("total_supply", sa.Integer(), nullable=False),
        sa.Column(
            "project_state",
            sa.Enum("INITIALIZED", "DISTRIBUTED", "CERTIFIED", "CLOSED", name="projectstate"),
            nullable=False,
        ),
        sa.Column("current_utxo_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("current_utxo_index", sa.Integer(), nullable=True),
        sa.Column("balance_lovelace", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("compilation_utxo_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("compilation_utxo_index", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["contract_id"], ["contracts.id"]),
        sa.ForeignKeyConstraint(["protocol_id"], ["protocols.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_projects_current_utxo_tx_id"), "projects", ["current_utxo_tx_id"], unique=False)
    op.create_index(op.f("ix_projects_grey_token_policy_id"), "projects", ["grey_token_policy_id"], unique=False)
    op.create_index(op.f("ix_projects_name"), "projects", ["name"], unique=False)
    op.create_index(op.f("ix_projects_project_id"), "projects", ["project_id"], unique=False)
    op.create_index(op.f("ix_projects_project_nft_policy_id"), "projects", ["project_nft_policy_id"], unique=False)
    op.create_table(
        "certifications",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("certification_date", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("real_certification_date", sa.Integer(), nullable=False),
        sa.Column("real_quantity", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "investor_sales",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("contract_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("contract_address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("seller_pkh", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("grey_token_amount", sa.Integer(), nullable=False),
        sa.Column("price_per_token", sa.Integer(), nullable=False),
        sa.Column("price_precision", sa.Integer(), nullable=False),
        sa.Column("min_purchase_amount", sa.Integer(), nullable=False),
        sa.Column("current_utxo_tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("current_utxo_index", sa.Integer(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("remaining_tokens", sa.Integer(), nullable=False),
        sa.Column("total_sales", sa.Integer(), nullable=False),
        sa.Column("total_revenue", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_investor_sales_contract_address"), "investor_sales", ["contract_address"], unique=False)
    op.create_index(op.f("ix_investor_sales_contract_name"), "investor_sales", ["contract_name"], unique=False)
    op.create_index(
        op.f("ix_investor_sales_current_utxo_tx_id"), "investor_sales", ["current_utxo_tx_id"], unique=False
    )
    op.create_index(op.f("ix_investor_sales_seller_pkh"), "investor_sales", ["seller_pkh"], unique=False)
    op.create_table(
        "stakeholders",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("stakeholder_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("pkh", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("participation", sa.Integer(), nullable=False),
        sa.Column("claimed", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_stakeholders_pkh"), "stakeholders", ["pkh"], unique=False)
    op.create_table(
        "tokens",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("policy_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("owner_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("owner_pkh", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("token_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tokens_owner_address"), "tokens", ["owner_address"], unique=False)
    op.create_index(op.f("ix_tokens_policy_id"), "tokens", ["policy_id"], unique=False)
    op.create_index(op.f("ix_tokens_token_name"), "tokens", ["token_name"], unique=False)
    op.create_table(
        "utxos",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("tx_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("output_index", sa.Integer(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("amount_lovelace", sa.Integer(), nullable=False),
        sa.Column("purpose", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_spent", sa.Boolean(), nullable=False),
        sa.Column("spent_at", sa.DateTime(), nullable=True),
        sa.Column("contract_id", sa.Integer(), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("extra_data", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["contract_id"], ["contracts.id"]),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_utxos_address"), "utxos", ["address"], unique=False)
    op.create_index(op.f("ix_utxos_is_spent"), "utxos", ["is_spent"], unique=False)
    op.create_index(op.f("ix_utxos_tx_id"), "utxos", ["tx_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_utxos_tx_id"), table_name="utxos")
    op.drop_index(op.f("ix_utxos_is_spent"), table_name="utxos")
    op.drop_index(op.f("ix_utxos_address"), table_name="utxos")
    op.drop_table("utxos")
    op.drop_index(op.f("ix_tokens_token_name"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_policy_id"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_owner_address"), table_name="tokens")
    op.drop_table("tokens")
    op.drop_index(op.f("ix_stakeholders_pkh"), table_name="stakeholders")
    op.drop_table("stakeholders")
    op.drop_index(op.f("ix_investor_sales_seller_pkh"), table_name="investor_sales")
    op.drop_index(op.f("ix_investor_sales_current_utxo_tx_id"), table_name="investor_sales")
    op.drop_index(op.f("ix_investor_sales_contract_name"), table_name="investor_sales")
    op.drop_index(op.f("ix_investor_sales_contract_address"), table_name="investor_sales")
    op.drop_table("investor_sales")
    op.drop_table("certifications")
    op.drop_index(op.f("ix_projects_project_nft_policy_id"), table_name="projects")
    op.drop_index(op.f("ix_projects_project_id"), table_name="projects")
    op.drop_index(op.f("ix_projects_name"), table_name="projects")
    op.drop_index(op.f("ix_projects_grey_token_policy_id"), table_name="projects")
    op.drop_index(op.f("ix_projects_current_utxo_tx_id"), table_name="projects")
    op.drop_table("projects")
    op.drop_index(op.f("ix_transactions_tx_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_tx_hash"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_status"), table_name="transactions")
    op.drop_table("transactions")
    op.drop_index(op.f("ix_protocols_protocol_nft_policy_id"), table_name="protocols")
    op.drop_index(op.f("ix_protocols_current_utxo_tx_id"), table_name="protocols")
    op.drop_table("protocols")
    op.drop_index(op.f("ix_wallets_staking_address"), table_name="wallets")
    op.drop_index(op.f("ix_wallets_name"), table_name="wallets")
    op.drop_index(op.f("ix_wallets_enterprise_address"), table_name="wallets")
    op.drop_table("wallets")
    op.drop_index(op.f("ix_contracts_policy_id"), table_name="contracts")
    op.drop_index(op.f("ix_contracts_name"), table_name="contracts")
    op.drop_table("contracts")
    # ### end Alembic commands ###
