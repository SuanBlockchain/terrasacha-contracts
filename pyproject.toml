[project]
name = "terrasacha-contracts"
version = "0.1.0"
description = "Terrasacha Smart Contracts with OpShin"
authors = [
    {name = "larestrepo",email = "larestrepomu@gmail.com"}
]
license = "MIT"
repository = "https://github.com/SuanBlockchain/terrasacha-contracts"
keywords = ["cardano", "blockchain", "smart-contracts", "opshin", "carbon-credits"]
readme = "README.md"
requires-python = ">=3.11,<3.13"
dependencies = [
    "opshin (>=0.24.3,<0.25.0)",
    "pycardano (>=0.15.0,<0.16.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "requests (>=2.32.5,<3.0.0)"
]

[tool.poetry]
packages = [{include = "terrasacha_contracts", from = "src"}]


[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.17.1"
pytest-cov = "^6.2.1"
pytest-xdist = "^3.8.0"
pytest-mock = "^3.14.1"
pytest-html = "^4.1.1"
pytest-benchmark = "^5.1.0"
pytest-watch = "^4.2.0"
hypothesis = "^6.138.3"


[tool.poetry.group.test.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-xdist = "^3.8.0"
pytest-mock = "^3.14.1"
hypothesis = "^6.138.3"
parameterized = "^0.9.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | artifacts
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["terrasacha"]
known_third_party = ["opshin", "pycardano", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
mypy_path = "src"
packages = ["terrasacha_contracts", "utils"]
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "opshin.*",
    "pycardano.*",
    "hypothesis.*",
    "parameterized.*",
]
ignore_missing_imports = true

# Skip type checking for OpShin contract files
[[tool.mypy.overrides]]
module = [
    "terrasacha_contracts.*",
    "utils.*",
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with -m 'not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance tests",
    "contracts: marks tests related to contract compilation/validation",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:hypothesis.*",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.flake8]
max-line-length = 88
select = ["E", "W", "F"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "artifacts",
]

# Performance benchmarking
[tool.pytest.benchmark]
min_rounds = 5
max_time = 2.0
min_time = 0.000005
timer = "perf_counter"
calibration_precision = 10
warmup = false
warmup_iterations = 100000
disable_gc = false
sort = "mean"
histogram = true
save_data = false
json_file = "benchmark.json"
compare = false